Analyze the project files for a simple e-commerce website project from an online React course, as well as the detailed high level steps to scaffold the project, given below. Use this information to flesh-out the last phase in detail, for a detailed guide that scaffolds the project for students, enabling them to learn React effectively through hands-on experience. Scaffolding is an instructional practice where an instructor gradually removes guidance and support as students learn and become more competent. The guide should include clear, step-by-step instructions and objectives, boilerplate code snippets for each major components for students to build-upon along with relevant examples to guide them in the correct direction. Make it consistent with the previous phases, also provided below. Idea is to nudge students toward figuring out the low-level implementation details themselves, and learn React by building projects with little but clear guidance.

High level steps to scaffold the project:
```markdown
## Scaffolding Steps for a React E-commerce Website Project

This guide provides a structured approach to building a simple e-commerce website using React. Follow these steps to learn through hands-on experience, fostering a deeper understanding of React concepts.

**Phase 1: Setting up the Foundation**

**Step 1: Project Initialization**

-   Begin by setting up a new React project. You can utilize a tool like "Create React App" to streamline the process. This tool will generate the basic file structure and dependencies necessary for your React application.
-   Familiarize yourself with the generated files and folders, paying attention to "index.html" (the entry point of your application) and "App.js" (where you will write your main React code).

**Step 2: Crafting the Header**

-   Create a new component file named "Header.js". Components are the building blocks of React, encapsulating UI elements. Your Header component will house the navigation bar of your e-commerce website.
-   Design a visually appealing header structure using HTML and CSS. Include elements like the website logo, a search bar for products, and navigation links.

**Step 3: Constructing the Home Page**

-   Create another component file named "Home.js" to build the main landing page of your website.
-   Structure the Home page using HTML and CSS. Consider including an image banner at the top.

**Phase 2: Dynamic Content and Routing**

**Step 4: Introducing Product Data**

-   Decide on a method for managing product data. You could either hardcode a few sample products directly in your "Home.js" file or create a separate JavaScript file to hold an array of product objects.
-   Each product object should contain essential details like an id, title, image URL, price, and a rating.

**Step 5: Implementing Product Display**

-   Create a new component file named "Product.js" to represent individual products on your website.
-   Design the visual structure of a product display using HTML and CSS. Include placeholders for product title, image, price, and rating.

**Step 6: Utilizing Props for Dynamic Rendering**

-   Pass the product data from the "Home.js" component to the "Product.js" component as "props". Props allow you to pass data between React components, making your rendering dynamic.
-   Within the "Product.js" component, access the passed props and use them to populate the placeholders you created in the previous step.

**Step 7: Integrating React Router**

-   Set up routing in your application using a library like "React Router". Routing allows users to navigate between different pages or sections of your website.
-   Create routes for the Home page and a Checkout page (which we will build in later steps).

**Phase 3: Building E-commerce Functionality**

**Step 8: Creating the Checkout Page**

-   Create a component file named "Checkout.js" to house the checkout functionality.
-   For now, you can keep the Checkout page simple with a basic layout.

**Step 9: State Management with Context API**

-   Implement a global state management solution using React's Context API. This will allow components at different levels of your application to share and update data (like the shopping cart) without manually passing props through every level.

**Step 10: Adding Items to the Cart**

-   Implement the functionality to add products to the shopping cart.
-   When a user clicks the "Add to Basket" button on a product, update the global state to reflect the addition of that product to the cart.

**Step 11: Removing Items from the Cart**

-   Build functionality to remove items from the shopping cart.
-   Implement a "Remove from Basket" button on the Checkout page for each product in the cart, allowing users to remove unwanted items.

**Phase 4: User Authentication**

**Step 12: Setting up Firebase Authentication**

-   Integrate Firebase into your project to enable user authentication. Firebase provides a streamlined way to manage user logins and registrations.

**Step 13: Creating a Login Page**

-   Create a component file named "Login.js" and design a user-friendly login form.
-   Implement the logic to handle user login using Firebase authentication.

**Phase 5: Final Touches**

**Step 14: Deployment**

-   Prepare your application for deployment. This might involve bundling your assets, optimizing for performance, and choosing a hosting platform.
-   Deploy your e-commerce website to a live server for the world to see!

Remember: This guide provides a high-level roadmap. Feel free to explore, experiment, and consult documentation for each step as you delve deeper into building your React e-commerce project. Happy coding!
```

Previous phases in detail:
## Phase 1: Setting up the Foundation

### **Step 1: Project Initialization**

1.  **Install Node.js and npm:** Ensure you have Node.js and npm (Node Package Manager) installed on your system. You can download them from [https://nodejs.org/](https://nodejs.org/).
2.  **Open your terminal and create a new React project using Create React App:**

```bash
npx create-react-app my-ecommerce-app
cd my-ecommerce-app
```

Replace "my-ecommerce-app" with your preferred project name.

3.  **Start the development server:**

```bash
npm start
```

This command starts the development server and typically opens your default web browser, displaying a basic React app.

4.  **Explore the Project Structure:** Familiarize yourself with the generated files and folders. Pay close attention to:

    *   **`public/index.html`**: The single HTML page of your React app. React will inject its components into the `root` element within this file.
    *   **`src/index.js`**: The entry point of your React application, where you connect your root component to the `index.html` file.
    *   **`src/App.js`**: The main component of your application where we will write the core logic for our e-commerce website.
    *   **`src/index.css`**: Global CSS styles.
    *   **`src/App.css`**: CSS styles specific to the `App` component.

### **Step 2: Crafting the Header**

1.  **Create a Header Component:** In the `src` folder, create a new file named `Header.js`.
2.  **Build the Basic Structure:** Let's add a simple header with a logo and placeholder navigation links.

    ```jsx
    // src/Header.js
    import React from "react";
    import "./Header.css";

    function Header() {
        return (
            <div className="header">
                <div className="header__logo">
                    {/* Add a logo here */}
                    <h2 className="header__logoTitle">eShop</h2>
                </div>
                <div className="header__nav">
                    {/* Add navigation links here */}
                </div>
            </div>
        );
    }

    export default Header;
    ```

3.  **Add CSS Styling:** Create a file named `Header.css` in the `src` folder. Paste the following CSS to give your header a basic style:

    ```css
    // src/Header.css
    .header {
        height: 60px;
        display: flex;
        align-items: center;
        background-color: #131921;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header__logo {
        display: flex;
        align-items: center;
        color: #ff9f00;
        margin: 0 25px;
    }

    .header__logoTitle {
        text-decoration: none;
        border: 0;
        color: white;
    }

    .header__nav {
        display: flex;
        justify-content: space-evenly;
    }
    ```

### **Step 3: Constructing the Home Page**

1.  **Create a Home Component:** Similar to Step 2, create a file named `Home.js` inside the `src` folder.

2.  **Set up the Basic Structure:** Inside `Home.js`, create a simple layout for your homepage:

    ```jsx
    // src/Home.js
    import React from "react";
    import "./Home.css";

    function Home() {
        return (
            <div className="home">
                {/* Add home page content here */}
            </div>
        );
    }

    export default Home;

    ```

3.  **Include Components in `App.js`:** Import the newly created `Header` and `Home` components into your main `App.js` file:

    ```jsx
    // src/App.js
    import './App.css';
    import Header from './Header';
    import Home from './Home';

    function App() {
        return (
            <div className="App">
                <Header />
                <Home />
            </div>
        );
    }

    export default App;

    ```

4.  **Add Basic Styling:** Create `Home.css` in the `src` folder to add styling to your home page:

```css
// src/Home.css
.home {
  display: flex;
  justify-content: center;
  margin-left: auto;
  margin-right: auto;
  max-width: 1500px;
}

```

At this point, you should have a basic React project set up with a header and a home page. Remember to stop and restart your development server whenever you make changes to see them reflected in your browser.

## Phase 2: Dynamic Content and Routing

### **Step 4: Introducing Product Data**

1.  **Create a Product Data File:** In your `src` folder, create a new JavaScript file named `data.js`.
2.  **Populate with Sample Data:** Within `data.js`, define an array of product objects. Each object should contain the following properties:

    *   `id`: A unique identifier for the product (you can use numbers or strings).
    *   `title`: The name of the product.
    *   `price`: The price of the product (you can use numbers).
    *   `rating`: A rating for the product (out of 5, using numbers).
    *   `image`: A URL pointing to an image of the product.

```javascript
// src/data.js
const products = [
    {
        id: "12321341",
        title: "Bennett Mystic 15.6 inch Laptop Shoulder Messenger Sling Office Bag, Water Repellent Fabric for Men and Women (Blue)",
        price: 11.96,
        rating: 5,
        image: "https://images-na.ssl-images-amazon.com/images/I/71mEsHyzSCL._SL1000_.jpg"
    },
    {
        id: "49538094",
        title: "IFB 30 L Convection Microwave Oven (30BRC2, Black, With Starter Kit)",
        price: 239.0,
        rating: 4,
        image: "https://images-na.ssl-images-amazon.com/images/I/81D8pNFmWzL._SL1500_.jpg"
    },
    // Add more products here...
];

export default products;
```

### **Step 5: Implementing Product Display**

1.  **Modify the `Product.js` Component:** Open the existing `Product.js` file in your `src` folder.
2.  **Replace Placeholders with Props:** Inside the `Product` function, replace the placeholders you created earlier with dynamic content retrieved from props. You'll receive the product data as an object named `props`.

    ```jsx
    // src/Product.js
    import React from "react";
    import "./Product.css";

    function Product(props) {
        return (
            <div className="product">
                <div className="product__info">
                    <p>{props.title}</p>
                    <p className="product__price">
                        <small>$</small>
                        <strong>{props.price}</strong>
                    </p>
                    <div className="product__rating">
                        {Array(props.rating) // Create an array from the rating value
                        .fill()           // Fill the array with empty values
                        .map((_, i) => ( // Map over the array to render stars
                            <p key={i}>⭐</p> // Use "key" for React to efficiently update the list
                        ))}
                    </div>
                </div>

                <img src={props.image} alt={props.title} />

                <button>Add to Basket</button>
            </div>
        );
    }

    export default Product;

    ```

### **Step 6: Utilizing Props for Dynamic Rendering**

1.  **Import Product Data and the `Product` component:** In your `Home.js` file, import the `products` array from `data.js` and the `Product` component.

    ```jsx
    // src/Home.js
    import React from "react";
    import "./Home.css";
    import Product from "./Product";
    import products from "./data"; // Import product data

    // ... rest of your Home component
    ```

2.  **Map Product Data to Components:** In your `Home.js` file, map over the `products` array to render a `Product` component for each product object. Pass the product data as props to each `Product` component.

    ```jsx
    // src/Home.js
    // ... (import statements from previous step)

    function Home() {
        return (
            <div className="home">
                <div className="home__container">
                    {/* ... your existing image banner ... */}

                    <div className="home__row">
                        {products.map(product => (
                            <Product 
                                key={product.id} // Assign a unique key to each product
                                id={product.id}
                                title={product.title}
                                price={product.price}
                                rating={product.rating}
                                image={product.image}
                            />
                        ))}
                    </div>

                    {/* You can add more home__row divs and map products as needed */}
                </div>   
            </div> 
        );
    }

    // ... (export statement)
    ```

### **Step 7: Integrating React Router**

1.  **Install React Router:** In your terminal, install the React Router DOM package.

    ```bash
    npm install react-router-dom
    ```

2.  **Set up the Router:** Wrap your main `App` component in `BrowserRouter` from `react-router-dom`.

    ```jsx
    // src/App.js
    import React from 'react';
    import { BrowserRouter as Router, Switch, Route } from "react-router-dom";
    import './App.css';
    import Checkout from './Checkout';
    import Header from './Header';
    import Home from './Home';

    function App() {
    return (
        <Router> 
        <div className="App">
            {/* Header will remain consistent across pages */}
            <Header />

            <Switch>
            {/* Use exact for the home route to prevent it from matching all routes */}
            <Route exact path="/"> 
                <Home />
            </Route>

            <Route path="/checkout">
                <Checkout />
            </Route>

            {/* Other routes can be added here later */}
            </Switch>
        </div>
        </Router>
    );
    }

    export default App;

    ```

3.  **Create Links:** Use `Link` from `react-router-dom` to navigate between the Home and Checkout pages.

    *   In `Header.js`, wrap the shopping cart icon with a `Link` to `/checkout`.
    *   You can create additional links in your application as needed.

    ```jsx
    // src/Header.js
    import React from "react";
    import "./Header.css";
    import ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';
    import StorefrontIcon from '@material-ui/icons/Storefront';
    import SearchIcon from '@material-ui/icons/Search';
    import { Link } from "react-router-dom"; // Import Link

    function Header() {
        // ... your existing header content ...

        return (
            <div className="header">
                {/* ... your existing logo ... */}

                <div className="header__nav">
                    {/* ... your existing navigation links ... */}

                    <Link to="/checkout" style={{ textDecoration: "none" }}> {/* Wrap with Link */}
                        <div className="nav__itemBasket">
                            <ShoppingBasketIcon/>
                            <span className="nav__itemLineTwo nav__basketCount">0</span>
                        </div>
                    </Link> {/* Close the Link tag */}
                </div>
            </div>
        );
    }
    ```

At this point, your application should display dynamically generated products on the home page and allow navigation between the Home page and a basic Checkout page using React Router.

## Phase 3: Building E-commerce Functionality

### **Step 8: Creating the Checkout Page**

1.  **Enhance the Checkout Page Structure:** Open your `Checkout.js` file. Let's add a more informative structure with sections for displaying checkout products and order summary.

```jsx
// src/Checkout.js
import React from "react";
import "./Checkout.css";
import CheckoutProduct from "./CheckoutProduct";
import Subtotal from "./Subtotal.js";
import { useStateValue } from "./StateProvider";

function Checkout() {
  const [{ basket }, dispatch] = useStateValue();

  return (
    <div className="checkout">
      <div className="checkout__left">
        <img
          src="https://images-na.ssl-images-amazon.com/images/G/02/UK_CCMP/TM/OCC_Amazon1._CB423492668_.jpg"
          alt=""
          className="checkout__ad"
        />
        <div>
          <h2 className="checkout__title">Your Shopping Basket</h2>
          {/*  We will map through the basket and render CheckoutProduct here */}
        </div>
      </div>
      
      <div className="checkout__right">
          {/* We will render our Subtotal component here */}
      </div>
    </div>
  );
}

export default Checkout;

```

### **Step 9: State Management with Context API**

1.  **Create a Context and Reducer:** Generate two files, `StateProvider.js` and `reducer.js`, within your `src` directory.

    *   **`StateProvider.js`**:

    ```jsx
    // src/StateProvider.js
    import React, { createContext, useContext, useReducer } from "react";

    // This will be our data layer
    export const StateContext = createContext();

    // Build a Provider
    export const StateProvider = ({ reducer, initialState, children }) => (
      <StateContext.Provider value={useReducer(reducer, initialState)}>
        {children}
      </StateContext.Provider>
    );

    // This is how we will pull information from the data layer
    export const useStateValue = () => useContext(StateContext);
    ```

    *   **`reducer.js`**:

    ```javascript
    // src/reducer.js
    export const initialState = {
        basket: [],
    };

    const reducer = (state, action) => {
        // We listen to different actions being dispatched
        console.log(action);

        switch(action.type) {
            case "ADD_TO_BASKET":
                return {
                    // ...state means that we return the state as it originally was
                    ...state,
                    // Except, we modify the basket by adding whatever product (action.item)
                    // was passed to this reducer with ADD_TO_BASKET action
                    basket: [...state.basket, action.item],
                };

            default:
                return state;
        }
    };

    export default reducer;
    ```
2.  **Wrap your Application with the Provider:** Open your main `index.js` file. Wrap your `<App />` component with the `StateProvider`.

```jsx
// src/index.js
// Existing imports

import reducer, { initialState } from "./reducer";
import { StateProvider } from "./StateProvider";


ReactDOM.render(
  <React.StrictMode>
  {/* Here we provide the reducer to the root of the app  */}
    <StateProvider initialState={initialState} reducer={reducer}>
      <App />
    </StateProvider>
  </React.StrictMode>,
  document.getElementById("root")
);
```

### **Step 10: Adding Items to the Cart**

1.  **Implement Add to Basket Functionality:** In `Product.js`, implement the `addToBasket` function to dispatch the "ADD\_TO\_BASKET" action when the "Add to Basket" button is clicked.

    ```jsx
    // src/Product.js
    import React from "react";
    import "./Product.css";
    import { useStateValue } from "./StateProvider"; // Import useStateValue

    function Product({ id, title, image, price, rating }) {
      // Access dispatch to update the global state
      const [{ basket }, dispatch] = useStateValue(); 

      const addToBasket = () => {
        // Dispatch the action to add the product to the basket
        dispatch({
          type: "ADD_TO_BASKET",
          item: {
            id: id,
            title: title,
            image: image,
            price: price,
            rating: rating,
          },
        });
      };

      return (
        <div className="product">
            {/* ... rest of your Product component... */}
            <button onClick={addToBasket}>Add to Basket</button>
        </div>
      );
    }
    ```
2.  **Display Products in Checkout:** Update `Checkout.js` to map through the `basket` array and render `CheckoutProduct` components for each item.

    ```jsx
    // src/Checkout.js
    // ... existing imports ...

    function Checkout() {
        const [{ basket }, dispatch] = useStateValue();

        return (
            <div className="checkout">
                {/* ... (rest of your Checkout component) ... */}

                <div>
                    <h2 className="checkout__title">Your Shopping Basket</h2>
                    {basket.map(item => ( 
                        <CheckoutProduct 
                            id={item.id}
                            title={item.title}
                            image={item.image}
                            price={item.price}
                            rating={item.rating}
                        />
                    ))}
                </div>

                {/* ... (rest of your Checkout component) ... */}
            </div>
        );
    }

    // ... (export statement) ...
    ```

### **Step 11: Removing Items from the Cart**

1.  **Implement Remove from Basket Functionality:** In `CheckoutProduct.js`, create a `removeFromBasket` function to dispatch the "REMOVE\_FROM\_BASKET" action.
2.  **Add Remove Button:** Add a button to `CheckoutProduct` that, when clicked, calls `removeFromBasket`.
3.  **Update Reducer:** Modify the reducer in `reducer.js` to handle the "REMOVE\_FROM\_BASKET" action and update the basket state accordingly.

```javascript
// src/reducer.js
// ... (initialState and other code from previous steps) ...

const reducer = (state, action) => {
  // ... (other cases) ...

  case "REMOVE_FROM_BASKET":
    // Logic to remove item from basket
    // Find the index of the item to remove
    const index = state.basket.findIndex(
      (basketItem) => basketItem.id === action.id
    );
    // Create a copy of the basket
    let newBasket = [...state.basket]; 

    if (index >= 0) {
      // If item exists in basket, remove it
      newBasket.splice(index, 1); 
    } else {
      console.warn(
        `Can't remove product (id: ${action.id}) as its not in basket!`
      );
    }

    return {
      ...state, 
      basket: newBasket,
    };

  default:
    return state;
  }
};

// ... (export default reducer) ...
```

```jsx
// src/CheckoutProduct.js
import React from 'react';
import "./CheckoutProduct.css";
import { useStateValue } from './StateProvider';

function CheckoutProduct({ id, image, title, price, rating }) {
  const [{ basket }, dispatch] = useStateValue();

  const removeFromBasket = () => {
    // dispatch the action to remove item from basket
    dispatch({
      type: 'REMOVE_FROM_BASKET',
      id: id, // Pass the id of the product to remove
    });
  };

  return (
    <div className="checkoutProduct">
      <img className="checkoutProduct__image" src={image} alt="" />

      <div className="checkoutProduct__info">
        <p className="checkoutProduct__title">{title}</p>
        <p className="checkoutProduct__price">
          <small>$</small>
          <strong>{price}</strong>
        </p>
        <div className="checkoutProduct__rating">
          {Array(rating)
            .fill()
            .map((_, i) => (
              <p>⭐</p>
            ))}
        </div>
        <button onClick={removeFromBasket}>Remove from Basket</button>
      </div>
    </div>
  );
}

export default CheckoutProduct;
```

By the end of Phase 3, users should be able to add and remove products from the cart, with these actions reflected in the global state and the Checkout page. This setup provides a solid foundation for expanding e-commerce features in the following phases.

## Phase 4: User Authentication

### **Step 12: Setting up Firebase Authentication**

1.  **Create a Firebase Project:**
    *   Go to [https://firebase.google.com/](https://firebase.google.com/) and create a new Firebase project.
    *   Follow the instructions to set up your project. You'll likely need to create a new Firebase web app.
2.  **Enable Email/Password Authentication:**
    *   In your Firebase project console, navigate to "Authentication".
    *   Select "Get Started" and enable the "Email/Password" provider.
3.  **Install Firebase in your React Project:**

```bash
npm install firebase
```

1.  **Create a Firebase Configuration File:**
    *   Create a file named `firebase.js` inside your `src` folder.
    *   Copy your Firebase web app configuration from the Firebase console (it should look like the code snippet below) and paste it into `firebase.js`.
    *   Initialize Firebase and export the necessary objects (like `auth` for authentication and `db` for Firestore if you plan to use it).

    ```javascript
    // src/firebase.js
    import firebase from "firebase";

    const firebaseConfig = {
        // Your Firebase project configuration goes here
    };

    const firebaseApp = firebase.initializeApp(firebaseConfig);

    const db = firebaseApp.firestore(); // Export Firestore if you'll use it
    const auth = firebase.auth(); // Export auth for user authentication

    export { db, auth }; // Export the objects you need
    ```

### **Step 13: Creating a Login Page**

1.  **Build the Login Component Structure:**
    *   Open the `Login.js` file.
    *   Craft a simple login form using HTML, including input fields for email and password, and buttons for "Sign In" and "Create Account".

    ```jsx
    // src/Login.js
    import React, { useState } from 'react';
    import './Login.css'; // Import your CSS file for styling
    import { Link, useHistory } from "react-router-dom";
    import StorefrontIcon from '@material-ui/icons/Storefront';
    import { auth } from "./firebase";

    function Login() {
        // ... we will add state variables and functions here later

        return (
            <div className='login'>
                <Link to='/' style={{ textDecoration: "none" }}>
                    <div className="login__logo">
                        <StorefrontIcon className="login__logoImage" fontSize="large" />
                        <h2 className="login__logoTitle">eSHOP</h2>
                    </div>
                </Link>

                <div className='login__container'>
                    <h1>Sign-in</h1>

                    <form>
                        <h5>E-mail</h5>
                        <input type='text'  /> {/* Add onChange handler later */}

                        <h5>Password</h5>
                        <input type='password' /> {/* Add onChange handler later */}

                        <button type='submit' className='login__signInButton' >Sign In</button> {/* Add onClick handler later */}
                    </form>

                    <p>
                        By signing-in you agree to the eShop Website Conditions of Use & Sale. Please
                        see our Privacy Notice, our Cookies Notice and our Interest-Based Ads Notice.
                    </p>

                    <button className='login__registerButton'>Create your eShop Account</button> {/* Add onClick handler later */}
                </div>
            </div>
        );
    }

    export default Login;
    ```

2.  **Implement Login Functionality:**
    *   Within `Login.js`, import `useState` to manage the email and password input values.
    *   Create two state variables: `email` and `password`, initialized as empty strings.
    *   Attach `onChange` handlers to the input fields to update these state variables whenever the input values change.
    *   Implement the `signIn` function that will be called when the "Sign In" button is clicked.
    *   Inside `signIn`, prevent default form submission and use `auth.signInWithEmailAndPassword(email, password)` from Firebase to sign in the user.
    *   Handle successful login (e.g., redirect to the home page) and potential errors (display an error message).

    ```jsx
    // Inside src/Login.js
    // ... (other imports)

    function Login() {
        const history = useHistory(); // For redirecting after login
        const [email, setEmail] = useState('');
        const [password, setPassword] = useState('');

        const signIn = e => {
            e.preventDefault(); // Prevent default form submission

            // Firebase login logic
            auth
                .signInWithEmailAndPassword(email, password)
                .then(auth => {
                    // Successfully signed in, redirect to home page
                    history.push('/');
                })
                .catch(error => alert(error.message)); // Handle errors
        };

        // ... (rest of your Login component)
    }
    ```

3.  **Implement Registration Functionality:**
    *   Implement the `register` function, which will be called when the "Create Account" button is clicked.
    *   Inside `register`, use `auth.createUserWithEmailAndPassword(email, password)` to create a new user in Firebase.
    *   Like with `signIn`, handle success (e.g., redirect to home page) and potential errors (display an error message).

    ```jsx
    // Inside src/Login.js
    // ... (other code)

    const register = e => {
        e.preventDefault();

        // Firebase registration logic
        auth
            .createUserWithEmailAndPassword(email, password)
            .then((auth) => {
                // Successfully created a new user
                if (auth) {
                    history.push('/'); // Redirect to home page
                }
            })
            .catch(error => alert(error.message)); // Handle errors
    };

    // ... (rest of your Login component)
    ```

4.  **Add the Login Route:**
    *   In `App.js`, import the `Login` component.
    *   Add a new route for `/login` within your `Switch` component to render the `Login` page when the URL matches.

    ```jsx
    // src/App.js
    // ... other imports

    function App() {
        // ...

        return (
            <div className="App">
                <Router>
                    <Switch>
                        {/* ... other routes ... */}
                        <Route path="/login">
                            <Login /> 
                        </Route>
                        {/* ... other routes ... */}
                    </Switch>
                </Router>
            </div>
        );
    }
    ```

After completing Phase 4, users should be able to register, log in, and be redirected accordingly. Remember that this phase focuses on setting up basic user authentication. For a production-ready app, you'll need to implement more robust error handling, input validation, and potentially password reset functionality.

By providing this level of detail and code snippets, students can focus on understanding the core concepts of React and Firebase authentication while also gaining practical experience in building a real-world feature. They are encouraged to consult external documentation and explore further to solidify their understanding.


Project Files:

./src/Product.css
```css
.product {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    margin: 10px;
    padding: 20px;
    width: 100%;
    max-height: 400px;
    min-width: 100px;
    background-color: white;
    z-index: 1;
  }
  
  .product__rating {
    display: flex;
  }
  
  .product > img {
    max-height: 200px;
    width: 100%;
    object-fit: contain;
    margin: 20px 0 0 15px;
  }
  
  .product > button {
    background: #ff9f00;
    border: 1px solid;
    margin-top: 10px;
    border-color: #a88734 #9c7e31 #846a29;
    color: #111;
  }
  
  .product__price {
    margin-top: 5px;
  }
  
  .product__info {
    height: 100px;
    margin-bottom: 15px;
  }
```
./src/StateProvider.js
```js
import React, { createContext, useContext, useReducer } from "react";

// Prepares the dataLayer
export const StateContext = createContext();

// Wrap our app and provide the Data layer
export const StateProvider = ({ reducer, initialState, children }) => (
  <StateContext.Provider value={useReducer(reducer, initialState)}>
    {children}
  </StateContext.Provider>
);

// Pull information from the data layer
export const useStateValue = () => useContext(StateContext);
```
./src/firebase.js
```js
import firebase from "firebase";

const firebaseConfig = {
    apiKey: "AIzaSyBv6zEONDVJSxOlkxmyUVto6eWksYVXwSU",
    authDomain: "eshop-c2e0a.firebaseapp.com",
    projectId: "eshop-c2e0a",
    storageBucket: "eshop-c2e0a.appspot.com",
    messagingSenderId: "941031253944",
    appId: "1:941031253944:web:0bc5a43bc9fe9af86e514d",
    measurementId: "G-5BDLQRB305"
};

const firebaseApp = firebase.initializeApp(firebaseConfig);

const db = firebaseApp.firestore();

const auth = firebase.auth();

export { db, auth };


```
./src/Checkout.js
```js
import { SportsBasketball } from "@material-ui/icons";
import React from "react";
import "./Checkout.css";
import CheckoutProduct from "./CheckoutProduct";
import Subtotal from "./Subtotal.js";
import { useStateValue } from "./StateProvider";

function Checkout() {
    const [{basket}, dispatch] = useStateValue();
    return (
        <div className="checkout">
            <div className="checkout__left">
                <img src="https://images-na.ssl-images-amazon.com/images/G/02/UK_CCMP/TM/OCC_Amazon1._CB423492668_.jpg" alt="" className="checkout__ad" />
                <div>
                    <h2 className="checkout__title">
                        Your Shopping Basket
                    </h2>
                    {basket.map(item => (
                        <CheckoutProduct 
                            id = {item.id}
                            title = {item.title}
                            image = {item.image}
                            price = {item.price}
                            rating = {item.rating}
                        />
                    ))}
                </div>
            </div>

            <div className="checkout__right">
                <Subtotal />
            </div>
        </div>
    )
}

export default Checkout

```
./src/CheckoutProduct.css
```css
.checkoutProduct {
    display: flex;
    margin-top: 20px;
    margin-bottom: 20px;
}

.checkoutProduct__info {
    padding-left: 20px
}

.checkoutProduct__info > button {
    background: #ff9f00;
    border: 1px solid;
    margin-top: 10px;
    border-color: #a88734 #9c7e31 #846a29;
    color: #111;
}

.checkoutProduct__image {
    object-fit: contain;
    width: 180px;
    height: 180px;
  }

.checkoutProduct__rating {
    display: flex;
  }

.checkoutProduct__title {
    font-size: 17px;
    font-weight: 800;
}
```
./src/Home.js
```js
import React from "react";
import "./Home.css";
import Product from "./Product";

function Home() {
    return (
        <div className="home">
            <div className="home__container">

                <img src="https://www.x-cart.com/wp-content/uploads/2019/01/ecommerce-768x278.jpg" alt="" className="home__image" />

                <div className="home__row">
                    <Product
                        id="12321341"
                        title="Bennett Mystic 15.6 inch Laptop Shoulder Messenger Sling Office Bag, Water Repellent Fabric for Men and Women (Blue)"
                        price={11.96}
                        rating={5}
                        image="https://images-na.ssl-images-amazon.com/images/I/71mEsHyzSCL._SL1000_.jpg"
                    />
                    <Product
                        id="49538094"
                        title="IFB 30 L Convection Microwave Oven (30BRC2, Black, With Starter Kit)"
                        price={239.0}
                        rating={4}
                        image="https://images-na.ssl-images-amazon.com/images/I/81D8pNFmWzL._SL1500_.jpg"
                    />
                </div>

                <div className="home__row">
                    <Product
                        id="4903850"
                        title="All the Light we Cannot See: The Breathtaking World Wide Bestseller Paperback"
                        price={199.99}
                        rating={3}
                        image="https://images-eu.ssl-images-amazon.com/images/I/514kNkerQ0L._SY264_BO1,204,203,200_QL40_FMwebp_.jpg"
                    />
                    <Product
                        id="23445930"
                        title="Amazon Echo (3rd generation) | Smart speaker with Alexa, Charcoal Fabric"
                        price={98.99}
                        rating={5}
                        image="https://media.very.co.uk/i/very/P6LTG_SQ1_0000000071_CHARCOAL_SLf?$300x400_retinamobilex2$"
                    />
                    <Product
                        id="3254354345"
                        title="New Apple iPad Pro (12.9-inch, Wi-Fi, 128GB) - Silver (4th Generation)"
                        price={598.99}
                        rating={4}
                        image="https://images-na.ssl-images-amazon.com/images/I/816ctt5WV5L._AC_SX385_.jpg"
                    />
                </div>

                <div className="home__row">
                    <Product
                        id="90829332"
                        title="Samsung LC49RG90SSUXEN 49' Curved LED Gaming Monitor - Super Ultra Wide Dual WQHD 5120 x 1440"
                        price={1094.98}
                        rating={4}
                        image="https://images-na.ssl-images-amazon.com/images/I/6125mFrzr6L._AC_SX355_.jpg"
                    />
                </div>
            </div>   
        </div> 
    )
}

export default Home

```
./src/App.js
```js
import './App.css';
import Home from "./Home";
import Header from "./Header";
import Checkout from "./Checkout";
import Login from "./Login";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom";

function App() {
  return (
    <div className="App">
      <Router>

        <Switch>

          <Route path="/login">
            <Login />
          </Route>

          <Route path="/checkout">
            <Header />
            <Checkout />
          </Route>

          <Route path="/">    
            <Header />
            <Home />
          </Route>

        </Switch>

      </Router>

    </div>
  );
}

export default App;

```
./src/Login.css
```css
.login {
    background-color: white;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.login__logo {
    display: flex;
    margin: 30px 0;
}

.login__logoImage {
    color: #ff9f00;
}

.login__logoTitle {
    color: black;
}

.login__container {
    width: 300px;
    height: fit-content;
    display: flex;
    flex-direction: column;
    border-radius: 5px;
    border: 1px solid lightgray;
    padding: 20px;
}

.login__container > h1 {
    font-weight: 500;
    margin-bottom: 20px;
  }

.login__container > form > h5 {
    margin-bottom: 5px;
}

.login__container > form > input {
    height: 30px;
    margin-bottom: 10px;
    background-color: white;
    width: 98%;
  }

.login__container > p {
    margin-top: 15px;
    font-size: 12px;
}

.login__signInButton {
    background: #ff9f00;
    border-radius: 2px;
    width: 100%;
    height: 30px;
    border: 1px solid;
    margin-top: 10px;
    border-color: #a88734 #9c7e31 #846a29;
  }

  .login__registerButton {
    border-radius: 2px;
    width: 100%;
    height: 30px;
    border: 1px solid;
    margin-top: 10px;
    border-color: darkgray;
  }
```
./src/CheckoutProduct.js
```js
import React from 'react'
import "./CheckoutProduct.css";
import { useStateValue } from "./StateProvider";

function CheckoutProduct({ id, image, title, price, rating }) {
    const [{basket}, dispatch] = useStateValue();

    const removeFromBasket = () => {
        dispatch({
            type: "REMOVE_FROM_BASKET",
            id: id,
        })
    }
    return (
        <div className="checkoutProduct">
            <img src={image} alt="" className="checkoutProduct__image" />

            <div className="checkoutProduct__info">
                <p className="checkoutProduct__title">{title}
                </p>
                <p className="checkoutProduct__price">
                    <small>$</small>
                    <strong>{price}</strong>
                </p>
                <div className="checkoutProduct__rating">
                    {Array(rating)
                    .fill()
                    .map((_, i) => (
                        <p>⭐</p>
                    ))}
                </div>
                <button onClick={removeFromBasket}>Remove from Basket</button>
            </div>
        </div>
    )
}

export default CheckoutProduct

```
./src/index.js
```js
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reducer, { initialState } from "./reducer";
import { StateProvider } from "./StateProvider";

ReactDOM.render(
  <React.StrictMode>
    <StateProvider initialState={initialState} reducer={reducer}>
      <App />
    </StateProvider>
  </React.StrictMode>,
  document.getElementById('root')
);

```
./src/Product.js
```js
import React from "react";
import "./Product.css";
import { useStateValue } from "./StateProvider";

function Product({id, title, image, price, rating}) {

    const [state, dispatch] = useStateValue();

    const addToBasket = () => {
        dispatch({
            type: "ADD_TO_BASKET",
            item: {
                id: id,
                image: image,
                price: price,
                rating: rating,
            },
        });
    };

    return (
        <div className="product">
            <div className="product__info">
                <p>{title}</p>
                <p className="product__price">
                    <small>$</small>
                    <strong>{price}</strong>
                </p>
                <div className="product__rating">
                    {Array(rating)
                    .fill()
                    .map((_, i) => (
                        <p>⭐</p>
                    ))}
                </div>
            </div>

            <img src={image} />

            <button onClick={addToBasket}>Add to Basket</button>
        </div>
    )
}

export default Product

```
./src/Login.js
```js
import React, { useState } from 'react';
import './Login.css'
import { Link, useHistory } from "react-router-dom";
import StorefrontIcon from '@material-ui/icons/Storefront';
import { auth } from "./firebase";

function Login() {
    const history = useHistory();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const signIn = e => {
        e.preventDefault();

        auth
            .signInWithEmailAndPassword(email, password)
            .then(auth => {
                history.push('/');
            })
            .catch(error => alert(error.message))

    }

    const register = e => {
        e.preventDefault();

        auth
            .createUserWithEmailAndPassword(email, password)
            .then((auth) => {
                if (auth) {
                    history.push('/');
                }
            })
            .catch(error => alert(error.message))

    }

    return (
        <div className='login'> 
            <Link to='/' style={{ textDecoration: "none" }}>
                <div className="login__logo">
                    <StorefrontIcon className="login__logoImage" fontSize="large" />
                    <h2 className="login__logoTitle">eSHOP</h2>
                </div>
            </Link>

            <div className='login__container'>
                <h1>Sign-in</h1>

                <form>
                    <h5>E-mail</h5>
                    <input type='text' value={email} onChange={e => setEmail(e.target.value)} />

                    <h5>Password</h5>
                    <input type='password' value={password} onChange={e => setPassword(e.target.value)} />

                    <button type='submit' className='login__signInButton' onClick={signIn}>Sign In</button>
                </form>

                <p>
                    By signing-in you agree to the eShop Website Conditions of Use & Sale. Please
                    see our Privacy Notice, our Cookies Notice and our Interest-Based Ads Notice.
                </p>

                <button className='login__registerButton' onClick={register}>Create your eShop Account</button>
            </div>
        </div>
    )
}

export default Login;
```
./src/Header.js
```js
import React from "react";
import "./Header.css";
import ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';
import StorefrontIcon from '@material-ui/icons/Storefront';
import SearchIcon from '@material-ui/icons/Search';
import { Link } from "react-router-dom";
import { useStateValue } from "./StateProvider";

function Header() {
    const [{basket}, dispatch] = useStateValue();
    return (
        <div className="header">
          <Link to="/" style={{ textDecoration:"none" }}>
            <div className="header__logo">
                <StorefrontIcon className="header__logoImage" fontSize="large"/>
                <h2 className="header__logoTitle">eShop</h2>
            </div>
          </Link>
            

      <div className="header__search">
        <input type="text" className="header__searchInput" />
        <SearchIcon className="header__searchIcon" />
      </div>
      
      <div className="header__nav">
        <Link to="/login" style={{ textDecoration:"none" }}>
          <div className="nav__item">
            <span className="nav__itemLineOne">Hello Guest</span>
            <span className="nav__itemLineTwo">Sign In</span>
          </div>
        </Link>
        <div className="nav__item">
          <span className="nav__itemLineOne">Your</span>
          <span className="nav__itemLineTwo">Shop</span>
        </div>
        <Link to="/checkout" style={{ textDecoration: "none" }}>
          <div className="nav__itemBasket">
            <ShoppingBasketIcon/>
            <span className="nav__itemLineTwo nav__basketCount">{basket.length}</span>
          </div>
        </Link>
      </div>
        </div>
    )
}

export default Header

```
./src/Checkout.css
```css
.checkout {
    display: flex;
    padding: 20px;
    background-color: white;
    height: max-content;
}

.checkout__ad {
    width: 100%;
    margin-bottom: 10px;
}

.checkout__title {
    margin-right: 10px;
    padding: 10px;
    border-bottom: 1px solid lightgray;
}

.checkout__left {
    display: flex;
    flex-direction: column;
}
```
./src/Header.css
```css
.header {
    height: 60px; 
    display: flex;
    align-items: center;
    background-color: #131921;
    position: sticky;
    top: 0;
    z-index: 100;
}

.header__logo {
    display: flex;
    align-items: center;
    color: #ff9f00;
    margin: 0 25px;
}

.header__logoImage {
    margin-right: 10px;
}

.header__logoTitle {
    text-decoration: none;
    border: 0;
    color: white;
}

.header__search {
    display: flex;
    flex: 1;
    align-items: center;
    border-radius: 24px;
    margin: 0 10px;
}

.header__searchInput {
    height: 12px;
    padding: 10px;
    border: none;
    width: 100%;
}

.header__searchIcon {
    padding: 5px;
    height: 22px !important;
    background-color: #ff9f00;
}

.header__nav {
    display: flex;
    justify-content: space-evenly;
}

.nav__item {
    display: flex;
    flex-direction: column;
    margin-left: 10px;
    margin-right: 10px;  
    color: white;
}

.nav__itemLineOne {
    font-size: 10px;
}

.nav__itemLineTwo {
    font-size: 13px;
    font-weight: 800; 
}

.nav__itemBasket {
    display: flex;
    align-items: center;
    color: white;
    margin-right: 50px;
    margin-left: 10px;
}

.nav__basketCount {
    margin-left: 10px;
    margin-right: 10px;
}
```
./src/Home.css
```css
.home {
    display: flex;
    justify-content: center;
    margin-left: auto;
    margin-right: auto;
    max-width: 1500px;
}
.home__image {
    width: 100%;
    height: 400px;
    z-index: -1;
    margin-bottom: -50px;
    mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0));
}

.home__row {  
    display: flex; 
    z-index: 1; 
    margin-left: 5px;  
    margin-right: 5px;
}
```
./src/Subtotal.js
```js
import React from "react";
import "./Subtotal.css";
import CurrencyFormat from "react-currency-format";
import { useStateValue } from "./StateProvider";
import { getBasketTotal } from "./reducer";

 
function Subtotal() {
    const [{basket}, dispatch] = useStateValue();
    return (
        <div className="subtotal">
            <CurrencyFormat 
                renderText = {(value) => (
                    <>
                        <p>
                            Subtotal ({basket.length} items): <strong>${value}</strong>
                        </p>
                        <small className="subtotal__gift">
                            <input type="checkbox" /> This order contains a gift
                        </small>
                    </>
                )}

                decimalScale={2}
                value={getBasketTotal(basket)}
                displayType={"text"}
                thousandSeparator={true}
                
            />

            <button>Proceed to Checkout</button>
        </div>
    )
}

export default Subtotal

```
./src/reducer.js
```js
// here we define all the application level states and define actions to make the changes to the state

export const initialState = {
    basket: [],
};

//Selector

export const getBasketTotal = (basket) => {
    return(basket?.reduce((amount, item) => item.price + amount, 0));
}

const reducer = (state, action) => {
    switch(action.type) {
        case "ADD_TO_BASKET":
            return {
                ...state,
                basket: [...state.basket, action.item],
            }
        
        case "REMOVE_FROM_BASKET":
            const index = state.basket.findIndex(
                (basketItem) => basketItem.id === action.id
            );

            let newBasket = [...state.basket];

            if (index>=0) {
                newBasket.splice(index, 1);
            } else {
                console.warn(
                    `Can't remove product(id: ${action.id}) as its not in the basket!`
                )
            }

            return {
                ...state,
                basket: newBasket
            }

        default:
            return state;
    }
}

export default reducer;
```
./src/App.css
```css
* {
    margin: 0;
    padding: 0;
  }
```
./src/Subtotal.css
```css
.subtotal {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 300px;
    height: 100px;
    padding: 20px;
    background-color: #f3f3f3;
    border: 1px solid #dddddd;
    border-radius: 3px;
}

.subtotal__gift {
    display: flex;
    align-items: center;
}

.subtotal__gift > input {
    margin-right: 5px;
}

.subtotal > button {
    background: #ff9f00;
    border-radius: 2px;
    width: 100%;
    height: 30px;
    border: 1px solid;
    margin-top: 10px;
    border-color: #a88734 #9c7e31 #846a29;
    color: #111;
}
```
./src/index.css
```css
body {
  margin: 0;
  background-color: rgb(234, 237, 237);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
```
./README.md
```md
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

```
./public/index.html
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <title>eSHOP Website</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

```
./package.json
```json
{
  "name": "eshop",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@material-ui/core": "^4.12.2",
    "@material-ui/icons": "^4.11.2",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "firebase": "^8.8.0",
    "firebase-login": "^1.0.0",
    "firebase-tools": "^9.16.0",
    "react": "^17.0.2",
    "react-currency-format": "^1.0.0",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

```
./firebase.json
```json
{
  "database": {
    "rules": "database.rules.json"
  }
}

```
./database.rules.json
```json
{
  /* Visit https://firebase.google.com/docs/database/security to learn more about security rules. */
  "rules": {
    ".read": false,
    ".write": false
  }
}
```